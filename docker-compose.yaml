version: '3.9'

services:
  postgres:
    image: postgres:13-alpine
    restart: always
    volumes:
      - pg_data_todolist:/var/lib/postgresql/data
      - ./.docker_env:/code/.env_example
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user23 -d todolist-database" ]
      interval: 5s
      timeout: 3s
      retries: 5
    ports:
      - "5432:5432"
    networks:
      - backend_nw

  migrations:
    build: ./todolist/.
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./.docker_env:/code/.env_example
    command: python ./todolist/manage.py migrate
    networks:
      - backend_nw

  api:
    build: ./todolist/.
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    ports:
      - "8000:8000"
    volumes:
      - ./.docker_env:/code/.env_example
    networks:
      - backend_nw

  bot:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./.docker_env:/code/.env_example
    environment:
      POSTGRES_HOST: localhost
    command: python ./todolist/manage.py runbot
    networks:
      - backend_nw

  front:
    image: sermalenk/skypro-front:lesson-38
    ports:
      - "80:80"
    depends_on:
      - postgres
      - api
    networks:
      - backend_nw

volumes:
  pg_data_todolist:

networks:
  backend_nw:
